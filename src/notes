use rand::Rng;
use std::env;
use std::fs::{self, File, OpenOptions};
use std::io::Write;
use std::path::Path;
use csv::Writer;

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() != 4 {
        println!("Usage: {} <paths> <number_of_files> <filesize>", args[0]);
        return;
    }

    let paths: Vec<&str> = args[1].split(',').collect();
    let number_of_files: usize = args[2].parse().unwrap();
    let filesize: usize = args[3].parse().unwrap();

    let mut rng = rand::thread_rng();
    let mut file_paths = Vec::new();

    for path in paths {
        if !Path::new(path).is_dir() {
            println!("{} is not a directory", path);
            continue;
        }

        for _ in 0..number_of_files {
            let filename: String = rng.sample_iter(&rand::distributions::Alphanumeric)
                          .take(10)
                          .map(char::from)
                          .collect();
            let file_path = format!("{}/{}", path, filename);

            let mut file = OpenOptions::new().write(true).create_new(true).open(&file_path).unwrap();
            for _ in 0..filesize {
                let byte: u8 = rng.gen();
                file.write_all(&[byte]).unwrap();
            }

            file_paths.push(file_path);
        }
    }

    let mut wtr = Writer::from_path("output.csv").unwrap();
    for file_path in &file_paths {
        wtr.write_record(&[file_path]).unwrap();
    }
    wtr.flush().unwrap();

    for file_path in file_paths {
        fs::remove_file(file_path).unwrap();
    }
}